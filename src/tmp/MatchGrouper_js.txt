
import {Col, Well} from 'react-bootstrap';
import MatchGroup from './MatchGroup';
import React, { Component } from 'react';


class MatchGrouper extends Component {

    makeNewGroupId = () => {
        // find the highest custom group
        let max = -Infinity;
        this.props.state.records.forEach((r) => {
            if(r.group[2] > max) max = r.group[2];
        });
        return max + 1;
    }

    moveRecord = (recordId, toGroupId) => {
        let oldGroupIds = this.props.state.groupIds;
        let newGroupId = ((toGroupId === "new") ? this.makeNewGroupId() : oldGroupIds[toGroupId].$group);
        this.props.fns.setRecordCustomGroup(recordId, newGroupId);
    }

    render() {

        if(this.props.state.grouperShowing) {
            //let groupCount = Object.keys(this.state.groupIds).length;
            let groups = [];
            let counter = 0;
            let groupKey = undefined;

            // not enough browsers support this
            //Object.values(this.props.state.groupIds).forEach( (group) => {
            Object.keys(this.props.state.groupIds).forEach(  (key) => {
                let group = this.props.state.groupIds[key];
                groupKey = 'groupKey' + counter;
                groups.push(<MatchGroup counter={counter} key={groupKey} id={group.$group} group={ group } moveFn={this.moveRecord} /> );
                ++counter;
            });
            groupKey = "groupKey" + counter;
            groups.push( <MatchGroup counter={counter} key={groupKey} id="new" moveFn={this.moveRecord} /> );
            return (
                    <Col xs={12} >
                        <Well>
                            <div className="match-group-header">Drag records until they are grouped how you like</div>
                            {groups}
                        </Well>
                    </Col>
            );
        }
        else {
            return null;
        }
    }
}

export default MatchGrouper;
